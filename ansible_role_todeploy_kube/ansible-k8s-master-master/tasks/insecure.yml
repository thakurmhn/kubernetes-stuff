---

#***install required packages
- name: Ensure required kubernetes master packages are installed
  yum: name='{{ item }}' state=latest
  with_items: '{{ k8s_mst_packages }}'

- name: Ensure cockpit-kubernetes is installed
  yum: name=cockpit-kubernetes state=latest
  when: k8s_cockpit == True
  notify:
    - Remove default cockpit packages
    - Setup CentOS7-Extras Repository for cockpit-kubernetes
    - Install cockpit-kubernetes
    - Disable CentOS7-Extras Repository post cockpit-kubernetes install 
    - Enable cockpit
    - Restart cockpit
    - Enable Cockpit Service in firewalld

#Configure Docker Storage
- name: Configure Docker Storage
  template: src=insecure/sysconfig/docker-storage-setup.j2 dest=/etc/sysconfig/docker-storage-setup
  when:
    - k8s_mst_is_node == False
    - k8s_docker_storage_setup == True
  notify: Restart flanneld

#****Configure general kubernetes settings
#config
- name: Configure etcd settings
  template: src=insecure/etcd/etcd.conf.j2 dest=/etc/etcd/etcd.conf
  notify:
    - Restart etcd
    - Restart kube-apiserver
    - Restart flanneld
    - Restart kube-proxy

- name: Configure kubernetes general settings
  template: src=insecure/kubernetes/config.j2 dest=/etc/kubernetes/config
  notify:
    - Restart kube-scheduler
    - Restart kube-controller-manager
    - Restart kube-proxy
    - Restart flanneld

#scheduler
- name: Configure kube-scheduler settings
  template: src=insecure/kubernetes/scheduler.j2 dest=/etc/kubernetes/scheduler
  notify: Restart kube-scheduler

#controller-manager
- name: Configure kube-controller-manager settings
  template: src=insecure/kubernetes/controller-manager.j2 dest=/etc/kubernetes/controller-manager
  notify: Restart kube-controller-manager

#***Configure kubernetes apiserver settings
- name: Configure kube-apiserver settings
  template: src=insecure/kubernetes/apiserver.j2 dest=/etc/kubernetes/apiserver
  notify: 
    - Restart kube-apiserver
    - Restart kube-scheduler
    - Restart kube-controller-manager
    - Restart kube-proxy
    - Restart flanneld

#***Enable and Startup core services

#etcd
- name: Enable and Start etcd service
  service: name=etcd enabled=yes state=started

#apiserver
- name: Enable and Start kube-apiserver service
  service: name=kube-apiserver enabled=yes state=started

#controller-manager
- name: Enable and Start kube-controller-manager service
  service: name=kube-controller-manager enabled=yes state=started

#scheduler
- name: Enable and Start kube-scheduler service
  service: name=kube-scheduler enabled=yes state=started

#***Setup flanneld backend network

#check etcd key
- name: Check to see if flanneld network config exists in etcd
  command: /usr/bin/etcdctl ls '{{ etcd_key }}'/config
  register: etcdctl_result
  changed_when: False
  ignore_errors: True

- name: Move flanneld network config to master
  template: src=insecure/flannel/flanneld-conf.json.j2 dest=/etc/kubernetes/flanneld-conf.json

- name: Configure flanneld network key in etcd
  shell: etcdctl --endpoint http://{{ ansible_hostname }}.{{ ansible_domain }}:{{ etcd_port }} set {{ etcd_key }}/config </etc/kubernetes/flanneld-conf.json
  when: etcdctl_result|failed
  notify: Restart flanneld

- name: Output flanneld network key for verification
  shell: etcdctl --endpoint=http://{{ ansible_hostname }}.{{ ansible_domain }}:{{ etcd_port }} get '{{ etcd_key }}'/config > /etc/kubernetes/etcdctl-out.txt
  register: flannel_diff
  changed_when: False
  failed_when: "flannel_diff.rc != 0"

- name: Verify flanneld network key
  shell: sed -i '$ d' /etc/kubernetes/etcdctl-out.txt && diff /etc/kubernetes/etcdctl-out.txt /etc/kubernetes/flanneld-conf.json
  changed_when: False

#***Remaining Configuration
#Configure local flannel settings
- name: Configure local flanneld settings
  template: src=insecure/sysconfig/flanneld.j2 dest=/etc/sysconfig/flanneld
  when: k8s_mst_is_node == False

#Configure kube-proxy
- name: Configure kube-proxy
  template: src=insecure/kubernetes/proxy.j2 dest=/etc/kubernetes/proxy
  when: k8s_mst_is_node == False

#***Remaining Services
#Enable and startup flanneld
- name: Enable flanneld service
  service: name=flanneld enabled=yes
  notify: Restart flanneld
  when: k8s_mst_is_node == False

#Enable and startup kube-proxy
- name: Enable kube-proxy service
  service: name=kube-proxy enabled=yes
  notify: Restart kube-proxy
  when: k8s_mst_is_node == False

#docker - make sure disabled, when this is not a node
- name: Ensure docker is not enabled
  service: name=docker enabled=no state=stopped
  when: k8s_mst_is_node == False
