---

#***install required packages
- name: Ensure required kubernetes master packages are installed
  yum: name='{{ item }}' state=latest
  with_items: '{{ k8s_mst_packages }}'

- name: Ensure cockpit-kubernetes is installed
  yum: name=cockpit-kubernetes state=latest
  when: k8s_cockpit == True
  notify:
    - Remove default cockpit packages
    - Setup CentOS7-Extras Repository for cockpit-kubernetes
    - Install cockpit-kubernetes
    - Disable CentOS7-Extras Repository post cockpit-kubernetes install 
    - Enable cockpit
    - Restart cockpit
    - Enable Cockpit Service in firewalld

#Configure Docker Storage
- name: Configure Docker Storage
  template: src=secure/sysconfig/docker-storage-setup.j2 dest=/etc/sysconfig/docker-storage-setup
  when:
    - k8s_mst_is_node == False
    - k8s_docker_storage_setup == True
  notify:  Restart flanneld

#***Configure general kubernetes settings
#config
- name: Configure etcd settings
  template: src=secure/etcd/etcd.conf.j2 dest=/etc/etcd/etcd.conf
  notify:
    - Restart etcd
    - Restart kube-apiserver
    - Restart flanneld
    - Restart kube-proxy

- name: Configure kubernetes general settings
  template: src=secure/kubernetes/config.j2 dest=/etc/kubernetes/config
  notify:
    - Restart kube-scheduler
    - Restart kube-controller-manager
    - Restart kube-proxy
    - Restart flanneld

#scheduler
- name: Configure kube-scheduler settings
  template: src=secure/kubernetes/scheduler.j2 dest=/etc/kubernetes/scheduler
  notify: Restart kube-scheduler

#controller-manager
- name: Configure kube-controller-manager settings
  template: src=secure/kubernetes/controller-manager.j2 dest=/etc/kubernetes/controller-manager
  notify: Restart kube-controller-manager

#***Configure secured apiserver and services
#Check presence of apiserver certificate path
- name: Check for presence of kube-apiserver certificate path
  stat: path="{{ k8s_apiserver_cert_path }}"
  register: apiserver_cert_path

- name: Create kube-apiserver certificate path
  file: path="{{ k8s_apiserver_cert_path }}" state=directory mode=655 group=root owner=root

#Check presence of apiserver certificates
- name: Check for presence of kube-apiserver CA key
  stat: path="{{ k8s_apiserver_cert_path }}/{{ k8s_apiserver_ca_key_filename }}"
  register: apiserver_ca_key

- name: Check for presence of kube-apiserver CA certificate
  stat: path="{{ k8s_apiserver_cert_path }}/{{ k8s_apiserver_ca_cert_filename }}"
  register: apiserver_ca_cert

- name: Check for presence of kube-apiserver server key
  stat: path="{{ k8s_apiserver_cert_path }}/{{ k8s_apiserver_server_key_filename }}"
  register: apiserver_server_key

- name: Check for presence of kube-apiserver server certificate signing request
  stat: path="{{ k8s_apiserver_cert_path }}/{{ k8s_apiserver_server_csr_filename }}"
  register: apiserver_server_csr

- name: Check for presence of kube-apiserver server certificate
  stat: path="{{ k8s_apiserver_cert_path }}/{{ k8s_apiserver_server_cert_filename }}"
  register: apiserver_server_cert

#Create openssl config
- name: Create Custom OpenSSL Config for kubernetes master certificates
  template: src=secure/openssl/openssl.conf.j2 dest={{ k8s_apiserver_cert_path }}/openssl.conf

#Generate apiserver certificates ref: http://kubernetes.io/docs/admin/authentication/
- name: Create local certificate path
  file:
    path: files/k8s-master-certs/{{ ansible_hostname }}.{{ ansible_domain }}
    state: directory
  delegate_to: localhost

- name: Generate kube-apiserver CA key
  shell: openssl genrsa -out {{ k8s_apiserver_cert_path }}/{{ k8s_apiserver_ca_key_filename }} 2048
  when: "apiserver_ca_key.stat.exists != True"
  notify:
    - Get CA key
    - Store CA key
    - Restart kube-apiserver
    - Restart kube-scheduler
    - Restart kube-controller-manager
    - Restart kube-proxy

- name: Generate kube-apiserver CA certificate
  shell: openssl req -x509 -new -nodes -key {{ k8s_apiserver_cert_path }}/{{ k8s_apiserver_ca_key_filename }} -subj "/CN='{{ ansible_hostname }}'" -days 10000 -out {{ k8s_apiserver_cert_path }}/{{ k8s_apiserver_ca_cert_filename }} -config {{ k8s_apiserver_cert_path }}/openssl.conf
  when: "apiserver_ca_cert.stat.exists != True"
  notify:
    - Get CA cert
    - Store CA cert
    - Restart kube-apiserver
    - Restart kube-scheduler
    - Restart kube-controller-manager
    - Restart kube-proxy

- name: Generate kube-apiserver server key
  shell: openssl genrsa -out {{ k8s_apiserver_cert_path }}/{{ k8s_apiserver_server_key_filename }} 2048
  when: "apiserver_server_key.stat.exists != True"
  notify:
    - Restart kube-apiserver
    - Restart kube-scheduler
    - Restart kube-controller-manager
    - Restart kube-proxy

- name: Generate kube-apiserver server certificate signing request
  shell: openssl req -new -key {{ k8s_apiserver_cert_path }}/{{ k8s_apiserver_server_key_filename }} -subj "/CN='{{ ansible_hostname }}'" -out {{ k8s_apiserver_cert_path }}/{{ k8s_apiserver_server_csr_filename }}
  when: "apiserver_server_csr.stat.exists != True"
  notify:
    - Restart kube-apiserver
    - Restart kube-scheduler
    - Restart kube-controller-manager
    - Restart kube-proxy

- name: Generate kube-apiserver server certificate
  shell: openssl x509 -req -in {{ k8s_apiserver_cert_path }}/{{ k8s_apiserver_server_csr_filename }} -CA {{ k8s_apiserver_cert_path }}/{{ k8s_apiserver_ca_cert_filename }} -CAkey {{ k8s_apiserver_cert_path }}/{{ k8s_apiserver_ca_key_filename }} -CAcreateserial -out {{ k8s_apiserver_cert_path }}/{{ k8s_apiserver_server_cert_filename }} -days 10000 -extensions v3_req -extfile {{ k8s_apiserver_cert_path }}/openssl.conf
  when: "apiserver_server_cert.stat.exists != True"
  notify:
    - Restart kube-apiserver
    - Restart kube-scheduler
    - Restart kube-controller-manager
    - Restart kube-proxy

- name: Ensure proper permissions on apiserver certificates
  file: dest="{{  k8s_apiserver_cert_path }}/{{ item }}" mode=644 owner=root group=root state=file
  with_items:
    - '{{ k8s_apiserver_ca_cert_filename }}'
    - '{{ k8s_apiserver_server_key_filename }}'
    - '{{ k8s_apiserver_server_csr_filename }}'
    - '{{ k8s_apiserver_server_cert_filename }}'
  notify:
    - Restart kube-apiserver
    - Restart kube-scheduler
    - Restart kube-controller-manager
    - Restart flanneld
    - Restart kube-proxy

- name: Ensure proper permissions on CA key
  file: dest="{{  k8s_apiserver_cert_path }}/{{ k8s_apiserver_ca_key_filename }}" mode=600 owner=root group=root state=file


#Update CA Trust
- name: Copy CA Certificate to Trusted Sources
  shell: cp {{ k8s_apiserver_cert_path }}/{{ k8s_apiserver_ca_cert_filename }} /etc/pki/ca-trust/source/anchors/{{ k8s_apiserver_ca_cert_filename }}
  when: "apiserver_ca_cert.stat.exists != True"

- name: Update CA Trust
  shell: update-ca-trust extract
  when: "apiserver_ca_cert.stat.exists != True"

- name: Restart etcd for kube-apiserver CA change
  service: name=etcd state=restarted
  when: "apiserver_ca_cert.stat.exists != True"

#***Configure kubernetes components with kubeconfigs
#proxy
- name: Configure kube-proxy with secure kubeconfig
  template: src=secure/kubernetes/proxy.kubeconfig.j2 dest=/etc/kubernetes/{{ k8s_proxy_kubeconfig_filename }}
  notify:
    - Restart flanneld
    - Restart kube-proxy
  when: k8s_mst_is_node == False

#scheduler
- name: Configure kube-scheduler with secure kubeconfig
  template: src=secure/kubernetes/scheduler.kubeconfig.j2 dest=/etc/kubernetes/{{ k8s_scheduler_kubeconfig_filename }}
  notify:
    - Restart kube-scheduler

#controller-manager
- name: Configure kube-controller-manager with secure kubeconfig
  template: src=secure/kubernetes/controller-manager.kubeconfig.j2 dest=/etc/kubernetes/{{ k8s_controller_manager_kubeconfig_filename }}
  notify:
    - Restart kube-controller-manager

#***Configure kubernetes apiserver settings
- name: Configure kube-apiserver settings
  template: src=secure/kubernetes/apiserver.j2 dest=/etc/kubernetes/apiserver
  notify:
    - Restart kube-apiserver
    - Restart kube-scheduler
    - Restart kube-controller-manager
    - Restart kube-proxy
    - Restart flanneld

#***Enable and Startup core services
#etcd
- name: Enable and Start etcd service
  service: name=etcd enabled=yes state=started

#apiserver
- name: Enable and Start kube-apiserver service
  service: name=kube-apiserver enabled=yes state=started

#controller-manager
- name: Enable and Start kube-controller-manager service
  service: name=kube-controller-manager enabled=yes state=started

#scheduler
- name: Enable and Start kube-scheduler service
  service: name=kube-scheduler enabled=yes state=started

#***Setup flanneld backend network
#check etcd key
- name: Check to see if flanneld network config exists in etcd
  command: etcdctl --cert-file {{ k8s_apiserver_cert_path }}/{{ k8s_apiserver_server_cert_filename }} --key-file {{ k8s_apiserver_cert_path }}/{{ k8s_apiserver_server_key_filename }} --ca-file {{ k8s_apiserver_cert_path }}/{{ k8s_apiserver_ca_cert_filename }} --endpoint=https://{{ ansible_hostname }}.{{ ansible_domain }}:{{ etcd_port }} ls '{{ etcd_key }}'/config
  register: etcdctl_result
  changed_when: False
  ignore_errors: True

- name: Move flanneld network config to master
  template: src=secure/flannel/flanneld-conf.json.j2 dest=/etc/kubernetes/flanneld-conf.json

- name: Configure flanneld network key in etcd secure
  shell: etcdctl --cert-file {{ k8s_apiserver_cert_path }}/{{ k8s_apiserver_server_cert_filename }} --key-file {{ k8s_apiserver_cert_path }}/{{ k8s_apiserver_server_key_filename }} --ca-file {{ k8s_apiserver_cert_path }}/{{ k8s_apiserver_ca_cert_filename }} --endpoint=https://{{ ansible_hostname }}.{{ ansible_domain }}:{{ etcd_port }} set {{ etcd_key }}/config </etc/kubernetes/flanneld-conf.json
  when: etcdctl_result|failed
  notify: Restart flanneld


- name: Output flanneld network key for verification
  shell: etcdctl --cert-file {{ k8s_apiserver_cert_path }}/{{ k8s_apiserver_server_cert_filename }} --key-file {{ k8s_apiserver_cert_path }}/{{ k8s_apiserver_server_key_filename }} --ca-file {{ k8s_apiserver_cert_path }}/{{ k8s_apiserver_ca_cert_filename }} --endpoint=https://{{ ansible_hostname }}.{{ ansible_domain }}:{{ etcd_port }} get '{{ etcd_key }}'/config > /etc/kubernetes/etcdctl-out.txt
  changed_when: False

- name: Verify flanneld network key
  shell: sed -i '$ d' /etc/kubernetes/etcdctl-out.txt && diff /etc/kubernetes/etcdctl-out.txt /etc/kubernetes/flanneld-conf.json
  register: flannel_diff
  changed_when: False
  failed_when: "flannel_diff.rc != 0"

#***Remaining Configuration
#Configure local flannel settings
- name: Configure local flanneld settings
  template: src=secure/sysconfig/flanneld.j2 dest=/etc/sysconfig/flanneld
  when: k8s_mst_is_node == False
  notify: 
    - Restart flanneld

#Configure kube-proxy
- name: Configure kube-proxy
  template: src=secure/kubernetes/proxy.j2 dest=/etc/kubernetes/proxy
  when: k8s_mst_is_node == False
  notify:
    - Restart flanneld
    - Restart kube-proxy

#***Remaining Services
#Enable and startup flanneld
- name: Enable flanneld service
  service: name=flanneld enabled=yes
  notify: Restart flanneld
  when: k8s_mst_is_node == False

#Enable and startup kube-proxy
- name: Enable kube-proxy service
  service: name=kube-proxy enabled=yes
  notify: Restart kube-proxy
  when: k8s_mst_is_node == False

#docker - make sure disabled, when master is not a node
- name: Ensure docker is not enabled
  service: name=docker enabled=no state=stopped
  when: k8s_mst_is_node == False
